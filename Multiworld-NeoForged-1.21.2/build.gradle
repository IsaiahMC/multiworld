plugins {
	id "java-library"
	id "maven-publish"
    id "com.github.johnrengelman.shadow" version "7.1.1"
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.10-SNAPSHOT"
}

architectury {
    platformSetupLoomIde()
    neoForge {
        platformPackage = "forge"
    }
}

// archivesBaseName = rootProject.archives_base_name

base {
    archivesBaseName = "Multiworld-NeoForged"
    version = "1.21.2"
    group = "me.isaiah.mods"
}

configurations {
    extraLibs
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

dependencies {
	minecraft "com.mojang:minecraft:1.21.2"
    neoForge "net.neoforged:neoforge:${rootProject.neoforged_version_1_21_2}"
    mappings loom.layered {
        it.mappings("net.fabricmc:yarn:1.21.2+build.1:v2")
        it.mappings("dev.architectury:yarn-mappings-patch-neoforge:1.21+build.4")
    }
	
	annotationProcessor 'com.pkware.jabel:jabel-javac-plugin:1.0.1-1'
    compileOnly 'com.pkware.jabel:jabel-javac-plugin:1.0.1-1'

    // Note:
    //  Forge port of CyberPermissions currently not on maven.
    //
    common fileTree(dir: 'lib', include: 'permissions-forge-dev.jar')
	
	// modImplementation("me.lucko:fabric-permissions-api:0.2-SNAPSHOT")
	// modImplementation("net.fabricmc:fabric-loader:0.14.18")

    common(project(path: ":Multiworld-Common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":Multiworld-Common", configuration: "transformProductionNeoForge")) { transitive = false }
    
    // fantasy api
    //common(project(path: ":fantasy-forge", configuration: "namedElements")) { transitive false }
    //shadowCommon(project(path: ":fantasy-forge", configuration: "transformProductionNeoForge")) { transitive = false }
    
    // common( project(path: ":fantasy-forge") )
    // shadowCommon( project(path: ":fantasy-forge") )
}

configure([tasks.compileJava]) {
    sourceCompatibility = 21 // for the IDE support
    options.encoding = "UTF-8"
    options.release = 21

    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

jar {
   sourceSets {
        main {
            java {
                exclude '**/fabric/*.java'
                exclude '**/fabric/*.class'
                exclude 'net/fabricmc/**/*.java'
                exclude 'net/fabricmc/**/*.class'
                exclude("**/dimapi/*.java")
                exclude("**/dimapi/*.class")
                exclude("**/dimapi/mixin/*.java")
                exclude("**/dimapi/mixin/*.class")
            }
			resources {
				exclude '**/fabric/*.java'
                exclude '**/fabric/*.class'
                exclude 'net/fabricmc/**/*.java'
                exclude 'net/fabricmc/**/*.class'
                exclude("**/dimapi/*.java")
                exclude("**/dimapi/*.class")
                exclude("**/dimapi/mixin/*.java")
                exclude("**/dimapi/mixin/*.class")
			}
        }
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }

	exclude '**/fabric/*.class'
	exclude '**/fabric/*.java'
	exclude 'net/fabricmc/**/*.class'
	exclude 'net/fabricmc/**/*.java'
    exclude("**/dimapi/*.java")
    exclude("**/dimapi/*.class")
    exclude("**/dimapi/mixin/*.java")
    exclude("**/dimapi/mixin/*.class")
}

shadowJar {
    sourceSets {
        main {
            java {
                exclude '**/fabric/*.java'
                exclude '**/fabric/*.class'
                exclude 'net/fabricmc/**/*.java'
                exclude 'net/fabricmc/**/*.class'
                exclude("**/dimapi/*.java")
                exclude("**/dimapi/*.class")
                exclude("**/dimapi/mixin/*.java")
                exclude("**/dimapi/mixin/*.class")
            }
        }
    }

    exclude "fabric.mod.json"
	exclude '**/fabric/*.java'
	exclude '**/fabric/*.class'
	exclude 'net/fabricmc/**/*.java'
	exclude 'net/fabricmc/**/*.class'
    exclude("**/dimapi/*.java")
    exclude("**/dimapi/*.class")
    exclude("**/dimapi/mixin/*.java")
    exclude("**/dimapi/mixin/*.class")

    configurations = [project.configurations.shadowCommon]
    // classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar

	sourceSets {
        main {
            java {
                exclude '**/fabric/*.java'
                exclude '**/fabric/*.class'
                exclude 'net/fabricmc/**/*.java'
                exclude 'net/fabricmc/**/*.class'
            }
        }
    }
    //lassifier null
}

tasks.named("build") { finalizedBy("copyReport2") }
tasks.named("build") { finalizedBy("copyReport2") }

tasks.register('copyReport2', Copy) {
    from remapJar
    into "${project.rootDir}/output"
}

/*
sourcesJar {
    // def commonSources = project(":Multiworld-Common").sourcesJar
    // dependsOn commonSources
    // from commonSources.archiveFile.map { zipTree(it) }
}
*/

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
